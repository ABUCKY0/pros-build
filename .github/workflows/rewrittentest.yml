name: Tests
on:
  push:
  pull_request:
    branches: "**"

#


env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
#

jobs:
  build:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event_name == 'pull_request' && 'PR-' || 'branch-' }}${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        
  # ----------------------------------------
  # RUN TESTS
  # ----------------------------------------
  Test_LemLib:
    name: "Test LemLib (And Upload Artifacts)"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout LemLib
        uses: actions/checkout@v4
        with:
          repository: LemLib/LemLib
          ref: stable
  
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Pull Docker image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event_name == 'pull_request' && 'PR-' || 'branch-' }}${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref }}
  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ./action/
  
      - name: Edit Action.yml File to point to local image
        env:
          DOCKER_IMAGE_TAG: ${{ format('{0}/{1}:{2}{3}', env.REGISTRY, env.IMAGE_NAME, (github.event_name == 'pull_request' && 'PR-' || 'branch-'), (github.event_name == 'pull_request' && github.event.pull_request.number || github.ref)) }}
        run: |
            cat ./action/action.yml
            sed -i 's|docker://ghcr.io/abucky0/pros-build:main|docker://'"$DOCKER_IMAGE_TAG"'|g' ./action/action.yml
            cat ./action/action.yml
      - name: Run PROS-build
        id: test
        uses: ./action
        with:
          multithreading: true
          no_commit_hash: false
  
      - name: Upload Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.test.outputs.name }}
          path: ${{ github.workspace }}/template/*
  
      - name: Add Artifact to Job Summary
        run: 'echo "### ðŸ“¦ Artifact url: ${{ steps.upload.outputs.artifact-url}}" >> $GITHUB_STEP_SUMMARY'